/*
  === Line Follower Robot V1 ===
  This Arduino sketch enables a simple line follower robot using two IR sensors (left and right)
  and dual DC motors controlled via an H-bridge (L298N or similar). The robot can follow a 
  straight black line on a white surface and is able to navigate large corners smoothly. 
  However, it struggles with very sharp turns due to its basic turning strategy.

  IR Sensor Logic:
  - LOW  = Line detected (black surface)
  - HIGH = No line detected (white surface)
*/

// === Pin Definitions ===
#define ENA 9   // Right motor speed control (PWM)
#define IN1 8   // Right motor direction 1
#define IN2 7   // Right motor direction 2

#define ENB 4   // Left motor speed control (PWM)
#define IN3 6   // Left motor direction 1
#define IN4 5   // Left motor direction 2

#define IR_LEFT 3   // Left IR sensor input
#define IR_RIGHT 2  // Right IR sensor input

// === Adjustable Parameters ===
int motorSpeed = 65;            // Base speed for forward motion
float backwardsScale = 0.6;     // Scale factor for backward turning speed (0.0 - 1.0)

void setup() {
  // Set motor pins as outputs
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);

  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  // Set IR sensor pins as inputs
  pinMode(IR_LEFT, INPUT);
  pinMode(IR_RIGHT, INPUT);

  // Ensure motors are stopped at startup
  stopMotors();
}

void loop() {
  // Read IR sensor values
  int leftIR = digitalRead(IR_LEFT);
  int rightIR = digitalRead(IR_RIGHT);

  // === Movement Logic ===

  // If both sensors detect the line, move forward
  if (leftIR == LOW && rightIR == LOW) {
    moveForward();
  }
  // If both sensors are off the line, stop
  else if (leftIR == HIGH && rightIR == HIGH) {
    stopMotors();
  }
  // If one sensor is off, adjust by turning
  else {
    if (leftIR == LOW && rightIR == HIGH) {
      // Turn slightly right: left motor forward, right motor backward
      runLeftMotorForward(motorSpeed);
      runRightMotorBackward(int(motorSpeed * backwardsScale));
    }
    else if (leftIR == HIGH && rightIR == LOW) {
      // Turn slightly left: right motor forward, left motor backward
      runRightMotorForward(motorSpeed);
      runLeftMotorBackward(int(motorSpeed * backwardsScale));
    }
  }
}

// === Motion Helper Functions ===

void moveForward() {
  runRightMotorForward(motorSpeed);
  runLeftMotorForward(motorSpeed);
}

void stopMotors() {
  stopLeftMotor();
  stopRightMotor();
}

// Right motor forward
void runRightMotorForward(int speed) {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, speed);
}

// Right motor backward
void runRightMotorBackward(int speed) {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, speed);
}

void stopRightMotor() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);
}

// Left motor forward
void runLeftMotorForward(int speed) {
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, speed);
}

// Left motor backward
void runLeftMotorBackward(int speed) {
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, speed);
}

void stopLeftMotor() {
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0);
}
