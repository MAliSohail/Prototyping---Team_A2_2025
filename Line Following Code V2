/*
  === Line Follower Robot V2 (Sharp Turn Variant) ===
  This version allows the robot to follow a straight line and navigate **sharper corners** 
  compared to the previous version. It does so by turning in place (one motor forward, one backward) 
  at full speed rather than a scaled-down speed. This increases turning sharpness.

  However, this approach makes the robot dependent on **specific sensor-triggered turning** 
  rather than general curve following. It can only recover sharp turns **if the line is detected 
  in the expected direction** (e.g., right sensor sees line, left does not). If the situation is 
  reversed or both sensors lose the line, the robot might fail to reorient.

  === Difference from Previous Version ===
  - `backwardsScale` is set to 1 (full speed backward) instead of 0.6.
  - This makes the robot spin faster for sharper turns.
  - More responsive to quick direction changes, but **less flexible** in complex paths.
*/

// === Pin Definitions ===
#define ENA 9   // Right motor speed (PWM)
#define IN1 8   // Right motor direction
#define IN2 7   // Right motor direction

#define ENB 4   // Left motor speed (PWM)
#define IN3 6   // Left motor direction
#define IN4 5   // Left motor direction

#define IR_LEFT 3    // Left IR sensor input
#define IR_RIGHT 2   // Right IR sensor input

// === Adjustable speed ===
int motorSpeed = 65;           // Base forward speed
float backwardsScale = 1;      // Backward motor speed scaling (1 = full speed)

// === Setup ===
void setup() {
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);

  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  pinMode(IR_LEFT, INPUT);
  pinMode(IR_RIGHT, INPUT);

  stopMotors();
}

// === Main Loop ===
void loop() {
  int leftIR = digitalRead(IR_LEFT);
  int rightIR = digitalRead(IR_RIGHT);

  // Move forward if both sensors detect the line
  if (leftIR == LOW && rightIR == LOW) {
    moveForward();
  }
  // Stop if both sensors are off the line
  else if (leftIR == HIGH && rightIR == HIGH) {
    stopMotors();
  }
  // Handle mismatched detection to turn
  else {
    if (leftIR == LOW && rightIR == HIGH) {
      // Left sees line, right doesn't → turn right sharply
      runRightMotorForward(motorSpeed);
      runLeftMotorBackward(int(motorSpeed * backwardsScale));  // full speed backward
    }
    else if (leftIR == HIGH && rightIR == LOW) {
      // Right sees line, left doesn't → turn left sharply
      runLeftMotorForward(motorSpeed);
      runRightMotorBackward(int(motorSpeed * backwardsScale)); // full speed backward
    }
  }
}

// === Movement Helper Functions ===

void moveForward() {
  runRightMotorForward(motorSpeed);
  runLeftMotorForward(motorSpeed);
}

void stopMotors() {
  stopLeftMotor();
  stopRightMotor();
}

// === Right Motor Control ===
void runRightMotorForward(int speed) {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, speed);
}

void runRightMotorBackward(int speed) {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, speed);
}

void stopRightMotor() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);
}

// === Left Motor Control ===
void runLeftMotorForward(int speed) {
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, speed);
}

void runLeftMotorBackward(int speed) {
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, speed);
}

void stopLeftMotor() {
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0);
}
