#include <Servo.h> 

// Pin definitions for ultrasonic sensor and servo motor
const int trigPin = 7;     // Trigger pin of the ultrasonic sensor
const int echoPin = 8;     // Echo pin of the ultrasonic sensor
const int servoPin = 9;    // PWM pin connected to the servo motor

// Create a servo object to control the radar servo
Servo radarServo;

long duration;       // Time taken for the ultrasonic pulse to return
int distance;        // Calculated distance in centimeters
int servoPosition = 90; // Initial position of servo (center)

// Setup function runs once when the program starts
void setup() {
  Serial.begin(9600);              // Start serial communication at 9600 bps
  pinMode(trigPin, OUTPUT);        // Set trigger pin as output
  pinMode(echoPin, INPUT);         // Set echo pin as input
  radarServo.attach(servoPin);     
  radarServo.write(90);            // Move servo to center position (90°)
  delay(1000);                     // Allow time for servo to reach position

  // Print header on Serial Monitor
  Serial.println("Ultrasonic Radar System Ready!");
  Serial.println("Angle | Distance (cm)");
  Serial.println("------|-------------");
}

// Main loop repeatedly sweeps the radar and measures distance
void loop() {
  // Sweep servo from 0° to 180°
  for(servoPosition = 0; servoPosition <= 180; servoPosition += 15) {
    radarServo.write(servoPosition);  // Move servo to current angle
    delay(200);                       // Wait for servo to stabilize
    distance = measureDistance();     // Measure distance using ultrasonic sensor

    // Print the angle and distance on the Serial Monitor
    Serial.print(servoPosition);
    Serial.print("°    | ");
    Serial.print(distance);
    Serial.println(" cm");

    delay(100);  // Short delay before next measurement
  }

  Serial.println("------|-------------");

  // Sweep back from 180° to 0°
  for(servoPosition = 180; servoPosition >= 0; servoPosition -= 15) {
    radarServo.write(servoPosition);  // Move servo
    delay(200);                       // Allow movement
    distance = measureDistance();     // Get distance

    // Print angle and distance again
    Serial.print(servoPosition);
    Serial.print("°    | ");
    Serial.print(distance);
    Serial.println(" cm");

    delay(100);  // Delay for stability
  }

  Serial.println("======|============="); // Divider after full sweep
  delay(500); // Delay before restarting the loop
}

int measureDistance() {
  // Send a 10-microsecond pulse to trigger pin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the time for pulse to return to echo pin
  duration = pulseIn(echoPin, HIGH);

  distance = duration * 0.0343 / 2;

  // Check for out-of-range readings
  if(distance > 400 || distance <= 0) {
    return 0; // Return 0 if the distance is invalid
  }
  return distance; // Return valid distance
}
