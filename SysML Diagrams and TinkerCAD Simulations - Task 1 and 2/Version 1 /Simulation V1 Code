#define TRIG_PIN1 2
#define ECHO_PIN1 3
#define TRIG_PIN2 4
#define ECHO_PIN2 5

#define MOTOR_LEFT_PIN 6
#define MOTOR_RIGHT_PIN 7

long readDistanceCM(int trigPin, int echoPin) {
    long duration, distance;

    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.034 / 2; // Speed of sound: 0.034 cm/us

    return distance;
}

void setup() {
    pinMode(TRIG_PIN1, OUTPUT);
    pinMode(ECHO_PIN1, INPUT);
    pinMode(TRIG_PIN2, OUTPUT);
    pinMode(ECHO_PIN2, INPUT);

    pinMode(MOTOR_LEFT_PIN, OUTPUT);
    pinMode(MOTOR_RIGHT_PIN, OUTPUT);

    Serial.begin(9600);
}

void loop() {
    long distance1 = readDistanceCM(TRIG_PIN1, ECHO_PIN1);
    long distance2 = readDistanceCM(TRIG_PIN2, ECHO_PIN2);

    Serial.print("Distance Sensor 1: ");
    Serial.print(distance1);
    Serial.println(" cm");

    Serial.print("Distance Sensor 2: ");
    Serial.print(distance2);
    Serial.println(" cm");

    if (distance1 < 15 || distance2 < 15) {
        // Obstacle detected, stop both motors
        digitalWrite(MOTOR_LEFT_PIN, LOW);
        digitalWrite(MOTOR_RIGHT_PIN, LOW);
        Serial.println("Obstacle detected! Motors stopped ðŸš«");
    } else {
        // No obstacle, move forward
        digitalWrite(MOTOR_LEFT_PIN, HIGH);
        digitalWrite(MOTOR_RIGHT_PIN, HIGH);
        Serial.println("No obstacles. Motors running ðŸš—ðŸ’¨");
    }

    delay(200); // Short delay before next measurement
}
